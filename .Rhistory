df1$Year <- year(df1$DATE)
df1$Month <- month(df1$DATE)
df2$DATE <- ymd(df2$REF_DATE)
df2$Year <- year(df2$DATE)
df2$Month <- month(df2$DATE)
df1 <- df1 |> select(DATE, Year, Month, GEO, `Class of electricity producer`,
`Type of electricity generation`, UOM, VALUE )
df2 <- df2 |> select(DATE, Year, Month, GEO, `Electric power, components`, VALUE)
df1_1 <- df1 |>
group_by(Year, GEO, `Class of electricity producer`, `Type of electricity generation`, UOM) |>
summarise(VALUE = sum(VALUE))
df2_1 <- df2 |>
group_by(Year, GEO, `Electric power, components`) |>
summarise(VALUE = sum(VALUE))
write.csv(df1_1, here("Data", "Clean_Energy_Generated_1.csv"), row.names = FALSE)
write.csv(df2_1, here("Data", "Clean_Energy_Generated_2.csv"), row.names = FALSE)
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
url <- "https://github.com/mehdi-naji/StrongerBC-Project/raw/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
url <- "https://github.com/BC-Economic-Development/StrongerBC-Project/raw/main/Data/Clean_Energy_Generated_1.csv"
df <- read.csv(url, header = TRUE)
url <- "https://github.com/BC-Economic-Development/StrongerBC-Project/raw/main/Data/Clean_Energy_Generated_1.csv"
url <- "https://github.com/bcgov/BC-Economic-Development/blob/main/Data/Clean_Energy_Generated_1.csv"
df <- read.csv(url, header = TRUE)
df <- read.csv(url, header = TRUE)
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_1.csv"
df <- read.csv(url, header = TRUE)
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
df <- read.csv(url, header = TRUE)
colnames(df2_1)
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
ddf<-  df |>
mutate(Component = `Electric power, components`) |>
filter(
GEO == geo,
Component %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
arrange(Year)
View(df)
ddf<-  df |>
mutate(Component = Electric.power,.components) |>
filter(
GEO == geo,
Component %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
arrange(Year)
rlang::last_trace()
conames(df)
colnames(df)
ddf<-  df |>
mutate(Component = Electric.power..components) |>
filter(
GEO == geo,
Component %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
arrange(Year)
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
View(df)
colnames(df)
ddff <- df |>
filter(
GEO == geo,
Electric.power..components %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
mutate(Component = Electric.power..components) |>
arrange(Year)
ddff <- df |>
filter(
GEO == "Canada",
Electric.power..components %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
mutate(Component = Electric.power..components) |>
arrange(Year)
View(ddff)
data1 <- ddff %>% filter(Component  == "Total generation")
View(data1)
runApp('app_homepage.R')
## EGC plot data----
m5_CEG_EGC_data <- function(df, geo){
df |>
filter(
GEO == "Canada",
Electric.power..components %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
mutate(Component = Electric.power..components) |>
arrange(Year)
}
m5_CEG_render_EGC(df_m5_CEG_2, "Canada")
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
m5_CEG_render_EGC(df, "Canada")
m5_CEG_render_EGC(df, "Canada")
## map plot data----
m5_CEG_map_data <- function(df, year){
df <-   df |>
filter(
GEO != "Canada",
Year == year,
Class.of.electricity.producer == "Total all classes of electricity producer",
Type.of.electricity.generation %in% c("Hydraulic turbine",
"Tidal power turbine",
"Wind power turbine",
"Solar"))|>
arrange(Year) |>
mutate(
Type = Type.of.electricity.generation,
VALUE = VALUE / 1000000) |>
group_by(Year, GEO) |>
summarize (VALUE = sum(VALUE, na.rm = TRUE), .groups = 'drop')
}
m5_CEG_render_map <- function(df, input){
df_map <- m5_CEG_map_data(df, input$m5_CEG_map_year)
mapchart(df_map, input)
}
m5_CEG_render_EGC(df, "Canada")
m5_CEG_render_EGC <- function(df2, input){
df <- m5_CEG_EGC_data(df2, input$m5_CEG_EGC_geo)
df_wide <- df %>%
tidyr::pivot_wider(names_from = Component, values_from = VALUE)
# Create the plotly area chart
plot <- plot_ly(df_wide, x = ~Year) %>%
add_trace(y = ~`Total generation`,  type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
add_trace(y = ~`Total electricity available for use within specific geographic border`, type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
layout(
title = "Area Chart for Two Variables",
xaxis = list(title = "Year"),
yaxis = list(title = "Value"),
showlegend = TRUE
)
plot
}
m5_CEG_render_EGC(df, "Canada")
runApp('app_homepage.R')
#activetabs----
active_tabs <- list(
mission1 = TRUE,
m1_PI =  TRUE,
m1_CHN = TRUE,
m1_GC =  TRUE,
m1_UR =  TRUE,
m1_FE =  TRUE,
m1_TS =  TRUE,
m1_MI =  TRUE,
m1_SB =  TRUE,
m1_LE =  TRUE,
m1_MH =  TRUE,
mission2 = TRUE,
m2_NBO = TRUE,
m2_HA  = TRUE,
m2_LMPR= TRUE,
m2_OVC = TRUE,
m2_GII = TRUE,
m2_PRHC= TRUE,
mission3 = TRUE,
mission4 = TRUE,
mission5 = TRUE,
m5_CEG = TRUE,
mission6 = TRUE,
m6_RnD = TRUE,
m6_VAEX= TRUE,
m6_nRinv= TRUE,
m6_LP = TRUE,
m6_EXP = TRUE
)
# Mission 5 ----
if (active_tabs$mission5) {
df_m5_CEG_1 <- load_m5_CEG1()
df_m5_CEG_2 <- load_m5_CEG2()}
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
library(statcanR)
library(dplyr)
library(tidyverse)
library(lubridate)
library(stringr)
library(here)
df1 <- statcan_download_data("25-10-0015-01", "eng")
df2 <- statcan_download_data("25-10-0016-01", "eng")
df1$DATE <- ymd(df1$REF_DATE)
df1$Year <- year(df1$DATE)
df1$Month <- month(df1$DATE)
df2$DATE <- ymd(df2$REF_DATE)
df2$Year <- year(df2$DATE)
df2$Month <- month(df2$DATE)
df1 <- df1 |> select(DATE, Year, Month, GEO, `Class of electricity producer`,
`Type of electricity generation`, UOM, VALUE )
df2 <- df2 |> select(DATE, Year, Month, GEO, `Electric power, components`, VALUE)
df1_1 <- df1 |>
group_by(Year, GEO, `Class of electricity producer`, `Type of electricity generation`, UOM) |>
summarise(VALUE = sum(VALUE))
# df2_1 <- df2 |>
#   group_by(Year, GEO, `Electric power, components`) |>
#   summarise(VALUE = sum(VALUE))
write.csv(df1_1, here("Data", "Clean_Energy_Generated_1.csv"), row.names = FALSE)
write.csv(df2, here("Data", "Clean_Energy_Generated_2.csv"), row.names = FALSE)
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
View(df)
runApp('app_homepage.R')
ddff <- m5_CEG_EGC_data(df, "Canada")
View(ddff)
df_wide <- ddff %>%
tidyr::pivot_wider(names_from = Component, values_from = VALUE)
View(df_wide)
runApp('app_homepage.R')
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
View(df)
runApp('app_homepage.R')
ddff <- df |>
filter(
GEO == "Canada",
Electric.power..components %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
mutate(Component = Electric.power..components) |>
select(DATE, GEO, Component, VALUE) |>
arrange(DATE)
View(ddff)
df_wide <- ddff %>%
tidyr::pivot_wider(names_from = Component, values_from = VALUE)
# Create the plotly area chart
plot <- plot_ly(df_wide, x = ~DATE) %>%
add_trace(y = ~`Total generation`, name = "Total generation",  type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
add_trace(y = ~`Total electricity available for use within specific geographic border`,
name = "Total electricity available",type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
layout(
plot_bgcolor = '#F2F2F2',
paper_bgcolor = '#F2F2F2',
xaxis = list(title = ""),
yaxis = list(title = "Value"),
legend = list(
x = 0.5,
y = -0.2,
xanchor = "center",
orientation = "h"
),
showlegend = TRUE
)
plot
runApp('app_homepage.R')
url <- "https://raw.githubusercontent.com/bcgov/BC-Economic-Development/refs/heads/main/Data/Clean_Energy_Generated_2.csv"
df <- read.csv(url, header = TRUE)
df <- na.omit(df)
ddff <- df |>
filter(
GEO == geo,
Electric.power..components %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
mutate(Component = Electric.power..components) |>
select(DATE, GEO, Component, VALUE) |>
arrange(DATE)
ddff <- df |>
filter(
GEO == "Canada",
Electric.power..components %in% c("Total generation", "Total electricity available for use within specific geographic border")
) |>
mutate(Component = Electric.power..components) |>
select(DATE, GEO, Component, VALUE) |>
arrange(DATE)
View(ddff)
df_wide <- ddff %>%
tidyr::pivot_wider(names_from = Component, values_from = VALUE)
# Create the plotly area chart
plot <- plot_ly(df_wide, x = ~DATE) %>%
add_trace(y = ~`Total generation`, name = "Total generation",  type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
add_trace(y = ~`Total electricity available for use within specific geographic border`,
name = "Total electricity available",type = 'scatter', mode = 'lines', fill = 'tozeroy') %>%
layout(
plot_bgcolor = '#F2F2F2',
paper_bgcolor = '#F2F2F2',
xaxis = list(title = ""),
yaxis = list(title = "Value"),
legend = list(
x = 0.5,
y = -0.2,
xanchor = "center",
orientation = "h"
),
showlegend = TRUE
)
plot
runApp('app_homepage.R')
library(shiny)
library(ggplot2)
# Sample Data
data <- mtcars
data$cyl <- as.factor(data$cyl) # Convert 'cyl' to factor for filtering
# UI
ui <- fluidPage(
# App title
titlePanel("Beautiful Shiny App with Filters"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Filters
selectInput(
"cyl_filter",
"Select Number of Cylinders:",
choices = levels(data$cyl),
selected = levels(data$cyl),
multiple = TRUE
),
sliderInput(
"hp_filter",
"Horsepower Range:",
min = min(data$hp),
max = max(data$hp),
value = c(min(data$hp), max(data$hp))
)
),
# Show the plot
mainPanel(
plotOutput("carPlot")
)
)
)
# Server
server <- function(input, output) {
# Create reactive data based on filters
filteredData <- reactive({
data %>%
filter(cyl %in% input$cyl_filter, hp >= input$hp_filter[1], hp <= input$hp_filter[2])
})
# Render Plot
output$carPlot <- renderPlot({
ggplot(filteredData(), aes(x = wt, y = mpg, color = cyl)) +
geom_point(size = 4, alpha = 0.7) +
labs(
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
title = "Car Mileage vs Weight by Cylinder Count"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "top"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(dplyr)
# Sample dataset for demonstration purposes
data <- data.frame(
Date = seq.Date(from = as.Date('2023-01-01'), by = 'month', length.out = 24),
Value1 = runif(24, 50, 100),
Value2 = runif(24, 30, 80),
Category = rep(c("A", "B"), 12)
)
# UI
title_main <- "Economic Strategy Dashboard"
title_sub <- "For Internal Use Only - Unofficial"
ui <- fluidPage(
# Header
tags$head(tags$style(HTML(".main-header {background-color: #003366; color: white; padding: 10px; text-align: center;}"))),
div(class = "main-header",
h1(title_main),
h4(title_sub)
),
# Filters and Plotly line chart
sidebarLayout(
sidebarPanel(
selectInput("category", "Select Category:", choices = unique(data$Category)),
dateRangeInput("date_range", "Select Date Range:",
start = min(data$Date),
end = max(data$Date))
),
mainPanel(
plotlyOutput("lineChart")
)
)
)
# Server
server <- function(input, output) {
output$lineChart <- renderPlotly({
filtered_data <- data %>%
filter(Category == input$category, Date >= input$date_range[1], Date <= input$date_range[2])
plot_ly(filtered_data, x = ~Date) %>%
add_lines(y = ~Value1, name = 'Value 1') %>%
add_lines(y = ~Value2, name = 'Value 2') %>%
layout(title = "Value Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Values"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/mnaji/ESB Dash')
library(shiny)
library(plotly)
library(dplyr)
library(statcanR)
df1 <- statcan_download_data("33-10-0825-01", "eng")
View(df1)
unique(df1$REF_DATE)
unique(df1$`Business characteristics`)
unique(df1$`Use of artificial intelligence (AI) by businesses or organizations in producing goods or delivering services over the last 12 months`)
df1_1 <- df1 |>
filter(`Business characteristics` %in% c("Agriculture, forestry, fishing and hunting [11]",
"Mining, quarrying, and oil and gas extraction [21]",
"Construction [23]" ,
"Manufacturing [31-33]" ,
"Wholesale trade [41]"  ,
"Retail trade [44-45]"  ,
"Transportation and warehousing [48-49]" ,
"Information and cultural industries [51]" ,
"Finance and insurance [52]"  ,
"Real estate and rental and leasing [53]" ,
"Professional, scientific and technical services [54]" ,
"Administrative and support, waste management and remediation services [56]"    ,
"Health care and social assistance [62]" ,
"Arts, entertainment and recreation [71]" ,
"Accommodation and food services [72]" ,
"Other services (except public administration) [81]"                ) )
View(df1_1)
df1_2 <- df1 |>
filter(`Business characteristics` %in% c("Agriculture, forestry, fishing and hunting [11]",
"Mining, quarrying, and oil and gas extraction [21]",
"Construction [23]" ,
"Manufacturing [31-33]" ,
"Wholesale trade [41]"  ,
"Retail trade [44-45]"  ,
"Transportation and warehousing [48-49]" ,
"Information and cultural industries [51]" ,
"Finance and insurance [52]"  ,
"Real estate and rental and leasing [53]" ,
"Professional, scientific and technical services [54]" ,
"Administrative and support, waste management and remediation services [56]"    ,
"Health care and social assistance [62]" ,
"Arts, entertainment and recreation [71]" ,
"Accommodation and food services [72]" ,
"Other services (except public administration) [81]"),
`Use of artificial intelligence (AI) by businesses or organizations in producing goods or delivering services over the last 12 months` %in%
c("Type of AI application used, machine learning",
"Type of AI application used, natural language processing",
"Type of AI application used, virtual agents or chatbots",
"Type of AI application used, speech or voice recognition using AI",
"Type of AI application used, recommendation systems using AI",
"Type of AI application used, large language models",
"Type of AI application used, text analytics using AI" ,
"Type of AI application used, data analytics using AI" ,
"Type of AI application used, neural network" ,
"Type of AI application used, augmented reality" ,
"Type of AI application used, decision making systems based on AI" ,
"Type of AI application used, deep learning" ,
"Type of AI application used, image or pattern recognition" ,
"Type of AI application used, machine or computer vision" ,
"Type of AI application used, robotics process automation"  ,
"Type of AI application used, biometrics " ,
"Type of AI application used, marketing automation using AI" ,
"Type of AI application used, other"))
View(df1_2)
library(shiny)
library(plotly)
library(dplyr)
library(statcanR)
df1 <- statcan_download_data("33-10-0825-01", "eng")
View(df1)
df11 <- df1 |>
rename(use = `Use of artificial intelligence (AI) by businesses or organizations in producing goods or delivering services over the last 12 months`)
View(df11)
df1 <- df1 |>
rename(use = `Use of artificial intelligence (AI) by businesses or organizations in producing goods or delivering services over the last 12 months`,
business = `Business characteristics`)
View(df1)
df1 <- statcan_download_data("33-10-0825-01", "eng")
df1 <- df1 |>
rename(use = `Use of artificial intelligence (AI) by businesses or organizations in producing goods or delivering services over the last 12 months`,
business = `Business characteristics`)
df1$use <- gsub("Type of AI application used, machine learning, ", "", df1$use)
df1$use <- gsub("Type of AI application used, machine learning, ", "", df1$use)
View(df1)
df1$use <- gsub("Type of AI application used, ", "", df1$use)
df1$use <- gsub("No, business or organization did not use AI for producing goods or delivering services over the last 12 months", "No", df1$use)
# Replace specific text with "Yes"
df1$use <- gsub("Yes, business used AI for producing goods or delivering services over the last 12 months", "Yes", df1$use)
write.csv(df1, "aiapplications.csv")
write.csv(df1, "C:/Users/mnaji/Downloads/aiapplications.csv")
df1 <- statcan_download_data("33-10-0825-01", "eng")
df1 <- df1 |>
rename(use = `Use of artificial intelligence (AI) by businesses or organizations in producing goods or delivering services over the last 12 months`,
business = `Business characteristics`)
df1$use <- gsub("Type of AI application used, ", "", df1$use)
df1$use <- gsub("No, business or organization did not use AI for producing goods or delivering services over the last 12 months", "No", df1$use)
# Replace specific text with "Yes"
df1$use <- gsub("Yes, business used AI for producing goods or delivering services over the last 12 months", "Yes", df1$use)
df1 <- df1 |>
select (GEO, business, use, VALUE)
write.csv(df1, "C:/Users/mnaji/Downloads/aiapplications.csv")
write.csv(df1, "C:/Users/mnaji/Downloads/aiapplications.csv", row.names = FALSE)
write.csv(df1, "C:/Users/mnaji/Downloads/aiapplications.csv", row.names = FALSE)
write.csv(df1, "C:/Users/mnaji/Downloads/aiapplications.csv", row.names = FALSE)
