geom_point() +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
tags$head(
tags$style(HTML("
body, html {
height: 100%;
margin: 0;
padding: 0;
overflow: hidden;
}
.full-page {
height: 100vh;
display: flex;
justify-content: center;
align-items: center;
}
.scroll-container {
height: 200vh; /* 2x the viewport height */
scroll-snap-type: y mandatory;
overflow-y: scroll;
}
.scroll-section {
height: 100vh; /* Each section is one full viewport height */
scroll-snap-align: start;
}
"))
),
div(class = "scroll-container",
div(class = "scroll-section full-page",
plotOutput("chart1", height = "100%")
),
div(class = "scroll-section full-page",
plotOutput("chart2", height = "100%")
)
)
)
server <- function(input, output, session) {
output$chart1 <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
theme_minimal()
})
output$chart2 <- renderPlot({
ggplot(mtcars, aes(x = wt, y = qsec)) +
geom_point() +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
tags$head(
tags$style(HTML("
body, html {
margin: 0;
padding: 0;
}
.scroll-container {
height: 100vh;
overflow-y: auto;
scroll-snap-type: y mandatory;
}
.scroll-section {
height: 100vh;
scroll-snap-align: start;
display: flex;
justify-content: center;
align-items: center;
}
"))
),
div(class = "scroll-container",
div(class = "scroll-section",
plotOutput("chart1", height = "80%")
),
div(class = "scroll-section",
plotOutput("chart2", height = "80%")
)
)
)
server <- function(input, output, session) {
# First chart: Scatter plot
output$chart1 <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = 'blue') +
theme_minimal() +
labs(title = "Scatter Plot of MPG vs HP")
})
# Second chart: Bar chart
output$chart2 <- renderPlot({
ggplot(mtcars, aes(x = factor(cyl), fill = factor(cyl))) +
geom_bar() +
theme_minimal() +
labs(title = "Bar Chart of Cylinder Counts", x = "Number of Cylinders")
})
}
shinyApp(ui = ui, server = server)
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
library(shiny)
library(ggplot2)
ui <- fluidPage(
tags$head(
tags$style(HTML("
body, html {
margin: 0;
padding: 0;
}
.scroll-container {
height: 100vh;
overflow-y: auto;
scroll-snap-type: y mandatory;
scroll-behavior: smooth;
}
.scroll-section {
height: 100vh;
scroll-snap-align: start;
display: flex;
justify-content: center;
align-items: center;
}
.button-container {
position: fixed;
top: 20px;
right: 20px;
z-index: 1000;
}
"))
),
div(class = "button-container",
actionButton("scrollToChart1", "Go to Chart 1"),
actionButton("scrollToChart2", "Go to Chart 2")
),
div(id = "scrollContainer", class = "scroll-container",
div(id = "section1", class = "scroll-section",
plotOutput("chart1", height = "80%")
),
div(id = "section2", class = "scroll-section",
plotOutput("chart2", height = "80%")
)
)
)
server <- function(input, output, session) {
# First chart: Scatter plot
output$chart1 <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = 'blue') +
theme_minimal() +
labs(title = "Scatter Plot of MPG vs HP")
})
# Second chart: Bar chart
output$chart2 <- renderPlot({
ggplot(mtcars, aes(x = factor(cyl), fill = factor(cyl))) +
geom_bar() +
theme_minimal() +
labs(title = "Bar Chart of Cylinder Counts", x = "Number of Cylinders")
})
# Observe buttons and automate scrolling
observeEvent(input$scrollToChart1, {
session$sendCustomMessage(type = 'scrollTo', message = list(id = "section1"))
})
observeEvent(input$scrollToChart2, {
session$sendCustomMessage(type = 'scrollTo', message = list(id = "section2"))
})
}
# Custom JavaScript for smooth scrolling
jsCode <- "
Shiny.addCustomMessageHandler('scrollTo', function(message) {
document.getElementById(message.id).scrollIntoView({ behavior: 'smooth' });
});
"
shinyApp(ui = tagList(ui, tags$script(HTML(jsCode))), server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
tags$head(
tags$style(HTML("
body, html {
margin: 0;
padding: 0;
}
.scroll-container {
height: 100vh;
overflow-y: auto;
scroll-snap-type: y mandatory;
scroll-behavior: smooth;
}
.scroll-section {
height: 100vh;
scroll-snap-align: start;
display: flex;
justify-content: center;
align-items: center;
}
.button-container {
position: fixed;
top: 20px;
right: 20px;
z-index: 1000;
}
"))
),
div(class = "button-container",
actionButton("scrollToChart1", "Go to Chart 1"),
actionButton("scrollToChart2", "Go to Chart 2")
),
div(id = "scrollContainer", class = "scroll-container",
div(id = "section1", class = "scroll-section",
plotOutput("chart1", height = "80%")
),
div(id = "section2", class = "scroll-section",
plotOutput("chart2", height = "80%")
)
)
)
server <- function(input, output, session) {
# First chart: Scatter plot
output$chart1 <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = 'blue') +
theme_minimal() +
labs(title = "Scatter Plot of MPG vs HP")
})
# Second chart: Bar chart
output$chart2 <- renderPlot({
ggplot(mtcars, aes(x = factor(cyl), fill = factor(cyl))) +
geom_bar() +
theme_minimal() +
labs(title = "Bar Chart of Cylinder Counts", x = "Number of Cylinders")
})
# Observe buttons and automate scrolling
observeEvent(input$scrollToChart1, {
session$sendCustomMessage(type = 'scrollTo', message = list(id = "section1"))
})
observeEvent(input$scrollToChart2, {
session$sendCustomMessage(type = 'scrollTo', message = list(id = "section2"))
})
}
# Custom JavaScript for smooth scrolling
jsCode <- "
Shiny.addCustomMessageHandler('scrollTo', function(message) {
document.getElementById(message.id).scrollIntoView({ behavior: 'smooth' });
});
"
shinyApp(ui = tagList(ui, tags$script(HTML(jsCode))), server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
tags$head(
tags$style(HTML("
body, html {
margin: 0;
padding: 0;
}
.scroll-container {
height: 100vh;
overflow-y: auto;
scroll-snap-type: y mandatory;
scroll-behavior: smooth;
}
.scroll-section {
height: 100vh;
scroll-snap-align: start;
display: flex;
justify-content: center;
align-items: center;
}
.button-container {
position: fixed;
top: 20px;
right: 20px;
z-index: 1000;
}
"))
),
div(class = "button-container",
actionButton("toggleButton", "Go to Chart 2")
),
div(id = "scrollContainer", class = "scroll-container",
div(id = "section1", class = "scroll-section",
plotOutput("chart1", height = "80%")
),
div(id = "section2", class = "scroll-section",
plotOutput("chart2", height = "80%")
)
)
)
server <- function(input, output, session) {
# First chart: Scatter plot
output$chart1 <- renderPlot({
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point(color = 'blue') +
theme_minimal() +
labs(title = "Scatter Plot of MPG vs HP")
})
# Second chart: Bar chart
output$chart2 <- renderPlot({
ggplot(mtcars, aes(x = factor(cyl), fill = factor(cyl))) +
geom_bar() +
theme_minimal() +
labs(title = "Bar Chart of Cylinder Counts", x = "Number of Cylinders")
})
# Initial state
current_section <- reactiveVal(1)
observeEvent(input$toggleButton, {
if (current_section() == 1) {
session$sendCustomMessage(type = 'scrollTo', message = list(id = "section2"))
updateActionButton(session, "toggleButton", label = "Go to Chart 1")
current_section(2)
} else {
session$sendCustomMessage(type = 'scrollTo', message = list(id = "section1"))
updateActionButton(session, "toggleButton", label = "Go to Chart 2")
current_section(1)
}
})
}
# Custom JavaScript for smooth scrolling
jsCode <- "
Shiny.addCustomMessageHandler('scrollTo', function(message) {
document.getElementById(message.id).scrollIntoView({ behavior: 'smooth' });
});
"
shinyApp(ui = tagList(ui, tags$script(HTML(jsCode))), server = server)
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
library(shiny)
library(shinydashboard)
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "My App"),
dashboardSidebar(
sidebarMenu(
menuItem("Get Started", tabName = "get_started"),
menuItem("Components", tabName = "components"),
menuItem("Layouts", tabName = "layouts"),
menuItem("Articles", tabName = "articles"),
menuItem("Gallery", tabName = "gallery"),
menuItem("Reference", tabName = "reference"),
menuItem("Help", tabName = "help"),
menuItem("Deploy", tabName = "deploy"),
menuItem("Contribute", tabName = "contribute")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "get_started", h3("Content for Get Started")),
tabItem(tabName = "components", h3("Content for Components")),
tabItem(tabName = "layouts", h3("Content for Layouts")),
tabItem(tabName = "articles", h3("Content for Articles")),
tabItem(tabName = "gallery", h3("Content for Gallery")),
tabItem(tabName = "reference", h3("Content for Reference")),
tabItem(tabName = "help", h3("Content for Help")),
tabItem(tabName = "deploy", h3("Content for Deploy")),
tabItem(tabName = "contribute", h3("Content for Contribute"))
)
)
)
# Define server logic
server <- function(input, output) {}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
# Create a navbar with tabs
navbarPage(
title = NULL,  # No title
tabPanel("Get Started", h3("Content for Get Started")),
tabPanel("Components", h3("Content for Components")),
tabPanel("Layouts", h3("Content for Layouts")),
tabPanel("Articles", h3("Content for Articles")),
tabPanel("Gallery", h3("Content for Gallery")),
tabPanel("Reference", h3("Content for Reference")),
tabPanel("Help", h3("Content for Help")),
tabPanel("Deploy", h3("Content for Deploy")),
tabPanel("Contribute", h3("Content for Contribute"))
)
)
# Define server logic
server <- function(input, output) {}
# Run the application
shinyApp(ui = ui, server = server)
runApp('app_homepage.R')
library(shiny)
# Define UI
ui <- fluidPage(
# Create a navbar with tabs
navbarPage(
title = NULL,  # No title
tabPanel("Get Started", h3("Content for Get Started")),
tabPanel("Components", h3("Content for Components")),
tabPanel("Layouts", h3("Content for Layouts")),
tabPanel("Articles", h3("Content for Articles")),
tabPanel("Gallery", h3("Content for Gallery")),
tabPanel("Reference", h3("Content for Reference")),
tabPanel("Help", h3("Content for Help")),
tabPanel("Deploy", h3("Content for Deploy")),
tabPanel("Contribute", h3("Content for Contribute"))
)
)
# Define server logic
server <- function(input, output) {}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI
ui <- fluidPage(
# Create a navbar with tabs
navbarPage(
title = NULL,  # No title
tabPanel("Get Started", h3("Content for Get Started")),
tabPanel("Components", h3("Content for Components")),
tabPanel("Layouts", h3("Content for Layouts")),
tabPanel("Articles", h3("Content for Articles")),
tabPanel("Gallery", h3("Content for Gallery")),
tabPanel("Reference", h3("Content for Reference")),
tabPanel("Help", h3("Content for Help")),
tabPanel("Deploy", h3("Content for Deploy")),
tabPanel("Contribute", h3("Content for Contribute"))
)
)
# Define server logic
server <- function(input, output) {}
# Run the application
shinyApp(ui = ui, server = server)
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
runApp('app_homepage.R')
library(shiny); runApp('app_homepage.R')
